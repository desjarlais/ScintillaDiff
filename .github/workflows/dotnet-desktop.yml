# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    environment: NuGet
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: ScintillaDiffer.sln
      App_Project_Directory_1: ScintillaDiff
      App_Project_Path_1: ScintillaDiff\ScintillaDiff.csproj

      App_Project_Directory_2: ScintillaDiff.NET
      App_Project_Path_2: ScintillaDiff.NET\ScintillaDiff.NET.csproj

      NUGET_APIKEY: ${{ secrets.NUGET_APIKEY }}
      NUGETAPI: ${{ secrets.NUGETAPI }}      
      GH_PACKAGES_APIKEY: ${{ secrets.GH_PACKAGES_APIKEY }}
      PACKAGESAPI: ${{ secrets.PACKAGESAPI }}
      NUGETCONFIG: ${{ secrets.NUGETCONFIG }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET 6 workload
    - name: Install .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the ScintillaDiff app package by building and packaging the NuGet
    - name: Create the ScintillaDiff NuGet package
      run: msbuild $env:App_Project_Path_1 /p:Configuration=$env:Configuration


    # Create the ScintillaDiff.NET app package by building and packaging the NuGet
    - name: Create the ScintillaDiff.NET NuGet package
      run: msbuild $env:App_Project_Path_2 /p:Configuration=$env:Configuration

    - name: Decode nuget.config
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $nuget_config_bytes = [System.Convert]::FromBase64String("$env:NUGETCONFIG")
        $currentDirectory = Get-Location
        $nugetConfigFile = Join-Path -Path $currentDirectory -ChildPath "nuget.config"
        [IO.File]::WriteAllBytes("$nugetConfigFile", $nuget_config_bytes)

    - name: NuGet push
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        $currentDirectory = Get-Location
        $files = Get-ChildItem $currentDirectory -r -Filter *ScintillaDiff*.nupkg # use the mask to discard possible third party packages..

        Write-Output $files.Count

        for ($i = 0; $i -lt $files.Count; $i++) 
        { 
            $file = $files[$i].FullName
            
            $arguments = @("push", $file, "$env:NUGET_APIKEY", "-Source", "$env:NUGETAPI", "-SkipDuplicate")
            
            # sign the NuGet packages.
            Write-Output (-join("Pushing NuGet:", $file, " ..."))
            nuget.exe $arguments
            
            $arguments = @("push", $file, "$env:GH_PACKAGES_APIKEY", "-Source", "$env:PACKAGESAPI", "-SkipDuplicate")
            nuget.exe $arguments
        }
